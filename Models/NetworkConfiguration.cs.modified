using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Windows;
using Newtonsoft.Json;

namespace TNP.App.Models
{
    /// <summary>
    /// Represents a network configuration consisting of network elements and connections.
    /// </summary>
    public class NetworkConfiguration
    {
        /// <summary>
        /// Gets or sets the unique identifier of the network configuration.
        /// </summary>
        public Guid Id { get; set; } = Guid.NewGuid();

        /// <summary>
        /// Gets or sets the name of the network configuration.
        /// </summary>
        public string Name { get; set; } = "New Network";

        /// <summary>
        /// Gets or sets the description of the network configuration.
        /// </summary>
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the creation date of the network configuration.
        /// </summary>
        public DateTime CreationDate { get; set; } = DateTime.Now;

        /// <summary>
        /// Gets or sets the last modified date of the network configuration.
        /// </summary>
        public DateTime LastModifiedDate { get; set; } = DateTime.Now;

        /// <summary>
        /// Gets or sets the author of the network configuration.
        /// </summary>
        public string Author { get; set; } = Environment.UserName;

        /// <summary>
        /// Gets or sets the version of the network configuration.
        /// </summary>
        public string Version { get; set; } = "1.0";

        /// <summary>
        /// Gets or sets the tags associated with the network configuration.
        /// </summary>
        public List<string> Tags { get; set; } = new List<string>();

        /// <summary>
        /// Gets the collection of network elements in the configuration.
        /// </summary>
        public ObservableCollection<NetworkElement> Elements { get; } = new ObservableCollection<NetworkElement>();

        /// <summary>
        /// Gets the collection of connections between network elements in the configuration.
        /// </summary>
        public ObservableCollection<Connection> Connections { get; } = new ObservableCollection<Connection>();

        /// <summary>
        /// Adds a network element to the configuration.
        /// </summary>
        /// <param name="element">The network element to add.</param>
        public void AddElement(NetworkElement element)
        {
            if (element == null)
                throw new ArgumentNullException(nameof(element));

            if (!Elements.Contains(element))
            {
                Elements.Add(element);
            }
        }

        /// <summary>
        /// Removes a network element from the configuration.
        /// </summary>
        /// <param name="element">The network element to remove.</param>
        /// <returns>True if the element was removed, false otherwise.</returns>
        public bool RemoveElement(NetworkElement element)
        {
            if (element == null)
                throw new ArgumentNullException(nameof(element));

            // Remove all connections associated with this element
            var connectionsToRemove = Connections.Where(c => c.Source == element || c.Target == element).ToList();
            foreach (var connection in connectionsToRemove)
            {
                RemoveConnection(connection);
            }

            return Elements.Remove(element);
        }

        /// <summary>
        /// Adds a connection between network elements to the configuration.
        /// </summary>
        /// <param name="connection">The connection to add.</param>
        public void AddConnection(Connection connection)
        {
            if (connection == null)
                throw new ArgumentNullException(nameof(connection));

            if (connection.Source == null || connection.Target == null)
                throw new ArgumentException("Connection must have source and target elements");

            if (!Elements.Contains(connection.Source) || !Elements.Contains(connection.Target))
                throw new ArgumentException("Connection source and target must be in the network configuration");

            if (!Connections.Contains(connection))
            {
                Connections.Add(connection);
                connection.Source.AddConnection(connection);
                connection.Target.AddConnection(connection);
            }
        }

        /// <summary>
        /// Removes a connection from the configuration.
        /// </summary>
        /// <param name="connection">The connection to remove.</param>
        /// <returns>True if the connection was removed, false otherwise.</returns>
        public bool RemoveConnection(Connection connection)
        {
            if (connection == null)
                throw new ArgumentNullException(nameof(connection));

            if (connection.Source != null)
            {
                connection.Source.RemoveConnection(connection);
            }

            if (connection.Target != null)
            {
                connection.Target.RemoveConnection(connection);
            }

            return Connections.Remove(connection);
        }

        /// <summary>
        /// Creates a deep copy of this network configuration.
        /// </summary>
        /// <returns>A new instance of a network configuration with the same elements and connections.</returns>
        public NetworkConfiguration Clone()
        {
            var clone = new NetworkConfiguration
            {
                Id = Id,
                Name = Name,
                Description = Description,
                CreationDate = CreationDate,
                LastModifiedDate = DateTime.Now,
                Author = Author,
                Version = Version,
                Tags = new List<string>(Tags)
            };

            // Clone elements and keep track of original -> clone mapping
            var elementMap = new Dictionary<NetworkElement, NetworkElement>();
            foreach (var element in Elements)
            {
                var elementClone = CreateElementClone(element);
                clone.Elements.Add(elementClone);
                elementMap[element] = elementClone;
            }

            // Clone connections
            foreach (var connection in Connections)
            {
                var sourceClone = elementMap[connection.Source];
                var targetClone = elementMap[connection.Target];
                var connectionClone = new Connection(sourceClone, targetClone, connection.ConnectionType)
                {
                    Id = connection.Id,
                    Bandwidth = connection.Bandwidth,
                    IsSelected = connection.IsSelected,
                    IsActive = connection.IsActive,
                    Label = connection.Label,
                    Latency = connection.Latency,
                    PacketLoss = connection.PacketLoss
                };

                clone.Connections.Add(connectionClone);
                sourceClone.AddConnection(connectionClone);
                targetClone.AddConnection(connectionClone);
            }

            return clone;
        }

        private NetworkElement CreateElementClone(NetworkElement element)
        {
            // Create a new element of the same type
            NetworkElement clone;
            switch (element.ElementType)
            {
                case NetworkElementType.Router:
                    clone = new Router();
                    break;
                case NetworkElementType.Switch:
                    clone = new Switch();
                    break;
                case NetworkElementType.Server:
                    clone = new Server();
                    break;
                case NetworkElementType.Modem:
                    clone = new Modem();
                    break;
                default:
                    throw new NotSupportedException($"Unsupported element type: {element.ElementType}");
            }

            // Copy basic properties
            clone.Id = element.Id;
            clone.Name = element.Name;
            clone.Description = element.Description;
            clone.Position = element.Position;
            clone.IsSelected = element.IsSelected;
            clone.IsEnabled = element.IsEnabled;
            clone.IconPath = element.IconPath;

            return clone;
        }

        /// <summary>
        /// Saves the network configuration to a file.
        /// </summary>
        /// <param name="filePath">The path to save the file to.</param>
        public void SaveToFile(string filePath)
        {
            var data = new NetworkConfigurationData
            {
                Id = Id,
                Name = Name,
                Description = Description,
                CreationDate = CreationDate,
                LastModifiedDate = DateTime.Now,
                Author = Author,
                Version = Version,
                Tags = Tags,
                Elements = Elements.Select(e => new NetworkElementData
                {
                    Id = e.Id,
                    Name = e.Name,
                    Description = e.Description,
                    Type = e.ElementType.ToString(),
                    Position = new PointData { X = e.Position.X, Y = e.Position.Y }
                }).ToList(),
                Connections = Connections.Select(c => new ConnectionData
                {
                    Id = c.Id,
                    SourceElementId = c.Source.Id,
                    TargetElementId = c.Target.Id,
                    ConnectionType = c.ConnectionType.ToString(),
                    Bandwidth = c.Bandwidth
                }).ToList()
            };

            var json = JsonConvert.SerializeObject(data, Formatting.Indented);
            File.WriteAllText(filePath, json);
        }

        /// <summary>
        /// Loads a network configuration from a file.
        /// </summary>
        /// <param name="filePath">The path to load the file from.</param>
        /// <returns>The loaded network configuration.</returns>
        public static NetworkConfiguration LoadFromFile(string filePath)
        {
            var json = File.ReadAllText(filePath);
            var data = JsonConvert.DeserializeObject<NetworkConfigurationData>(json);

            var networkConfig = new NetworkConfiguration
            {
                Id = data.Id,
                Name = data.Name,
                Description = data.Description,
                CreationDate = data.CreationDate,
                LastModifiedDate = data.LastModifiedDate,
                Author = data.Author,
                Version = data.Version,
                Tags = data.Tags
            };

            // Create elements
            var elementsById = new Dictionary<Guid, NetworkElement>();
            foreach (var elementData in data.Elements)
            {
                NetworkElement element = null;

                // Create the appropriate element type
                switch (elementData.Type)
                {
                    case "Router":
                        element = new Router();
                        break;
                    case "Switch":
                        element = new Switch();
                        break;
                    case "Modem":
                        element = new Modem();
                        break;
                    case "Server":
                        element = new Server();
                        break;
                    default:
                        throw new InvalidOperationException($"Unknown element type: {elementData.Type}");
                }

                // Set properties
                element.Id = elementData.Id;
                element.Name = elementData.Name;
                element.Description = elementData.Description;
                element.Position = new Point(elementData.Position.X, elementData.Position.Y);

                networkConfig.Elements.Add(element);
                elementsById[element.Id] = element;
            }

            // Create connections
            foreach (var connectionData in data.Connections)
            {
                // Find source and target elements
                if (!elementsById.TryGetValue(connectionData.SourceElementId, out var sourceElement) ||
                    !elementsById.TryGetValue(connectionData.TargetElementId, out var targetElement))
                {
                    continue;  // Skip this connection if elements not found
                }
                
                // Parse connection type
                if (!Enum.TryParse<ConnectionType>(connectionData.ConnectionType, out var connectionType))
                {
                    connectionType = ConnectionType.Ethernet; // Default
                }

                var connection = new Connection(sourceElement, targetElement, connectionType)
                {
                    Id = connectionData.Id,
                    Bandwidth = connectionData.Bandwidth
                };

                networkConfig.Connections.Add(connection);
                sourceElement.AddConnection(connection);
                targetElement.AddConnection(connection);
            }

            return networkConfig;
        }
    }

    /// <summary>
    /// Data transfer object for network configuration serialization.
    /// </summary>
    public class NetworkConfigurationData
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime CreationDate { get; set; }
        public DateTime LastModifiedDate { get; set; }
        public string Author { get; set; }
        public string Version { get; set; }
        public List<string> Tags { get; set; }
        public List<NetworkElementData> Elements { get; set; }
        public List<ConnectionData> Connections { get; set; }
    }

    /// <summary>
    /// Data transfer object for network element serialization.
    /// </summary>
    public class NetworkElementData
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Type { get; set; }
        public PointData Position { get; set; }
    }

    /// <summary>
    /// Data transfer object for point serialization.
    /// </summary>
    public class PointData
    {
        public double X { get; set; }
        public double Y { get; set; }
    }

    /// <summary>
    /// Data transfer object for connection serialization.
    /// </summary>
    public class ConnectionData
    {
        public Guid Id { get; set; }
        public Guid SourceElementId { get; set; }
        public Guid TargetElementId { get; set; }
        public string ConnectionType { get; set; }
        public double Bandwidth { get; set; }
    }
}
